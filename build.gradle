plugins {
    id 'java'
    id 'jacoco'
    id 'maven'
    id 'signing'


    id 'com.fizzpod.sweeney' version '1.1.0'
    id 'com.github.hierynomus.license' version '0.14.0'    
    id 'com.github.johnrengelman.shadow' version '1.2.4'
    id 'com.github.kt3k.coveralls' version '2.8.1'
    id 'io.codearte.nexus-staging' version '0.6.1'
}

def envDB
// sys property (-Denv) or env var (ORG_GRADLE_PROJECT_env) as a fallback
def isTravis = System.getProperty('env', env) != null && System.getProperty('env', env)?.equals('travis')
if (isTravis) {
  // envDB = 'PostgreSQL,MySQL,H2,HSQLDB,SQLite,Firebird,Derby,Oracle,MSSQLServer,MariaDB,Percona'
  envDB = 'PostgreSQL,MySQL,H2,HSQLDB,SQLite,Firebird,Derby,Oracle,MSSQLServer'
} else {
  // sys property (-DDB) or env var (ORG_GRADLE_PROJECT_DB) as a fallback
  envDB = System.getProperty('DB', DB)
}

repositories {
    mavenCentral()
    flatDir dirs: 'src/test/repo' // holds p6spy-signedjar-test

    if (envDB.contains('Oracle')) {
      assert new File('/tmp/repo/ojdbc6.jar').exists()
      flatDir dirs: '/tmp/repo' // holds copied oracle jdbc driver
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7
compileJava.options.encoding = 'UTF8'
javadoc.options.encoding = 'UTF8'

dependencies {

  testCompile 'p6spy:p6spy-signedjar-test:1.0.0'

  // for providing misc *-nodep artifacts, please note that order matters here
  // even if slf4j complains about multiple implementations on classpath, it takes the 1.st one
  // and as we use log4j in tests => bridge needs to be the 1.st one specified 
  compileOnly 'org.slf4j:slf4j-api:1.7.7'
  compileOnly 'org.slf4j:slf4j-log4j12:1.7.7'
  compileOnly 'log4j:log4j:1.2.17'
  testCompile 'org.slf4j:slf4j-api:1.7.7'
  testCompile 'org.slf4j:slf4j-log4j12:1.7.7'
  testCompile 'log4j:log4j:1.2.17'

  compileOnly 'org.apache.logging.log4j:log4j-slf4j-impl:2.0-rc1'
  compileOnly 'org.apache.logging.log4j:log4j-api:2.0-rc1'
  compileOnly 'org.apache.logging.log4j:log4j-core:2.0-rc1'

  compileOnly 'ch.qos.logback:logback-classic:1.1.2' 
  compileOnly 'ch.qos.logback:logback-core:1.1.2'

  testCompile 'junit:junit:4.11'
  testCompile 'org.eclipse.jetty:jetty-plus:8.1.7.v20120910' // datasource testing through JNDI
  testCompile 'commons-dbcp:commons-dbcp:1.4' // datasource testing
  testCompile 'org.codehaus.btm:btm:2.1.4' // xa datasource testing
  testCompile 'org.apache.geronimo.specs:geronimo-jta_1.1_spec:1.1.1'
  testCompile 'org.liquibase:liquibase-core:3.0.8'
  testCompile 'com.mattbertolini:liquibase-slf4j:1.2.1'
  testCompile 'org.springframework:spring-jdbc:3.2.4.RELEASE'
  testCompile 'org.springframework:spring-context:3.2.4.RELEASE'
  testCompile 'com.j256.simplejmx:simplejmx:1.1'
  testCompile 'commons-io:commons-io:2.4'
  testCompile 'org.apache.commons:commons-exec:1.2'
  testCompile 'org.apache.commons:commons-lang3:3.3.2'
  testCompile 'commons-beanutils:commons-beanutils:1.9.1'
  testCompile 'org.mockito:mockito-core:2.7.22'

  // all the JDBC drivers tested
  testRuntime 'mysql:mysql-connector-java:5.1.21'
  testRuntime 'org.postgresql:postgresql:9.3-1100-jdbc41'
  testCompile 'org.hsqldb:hsqldb:2.3.1'
  testCompile 'com.h2database:h2:1.3.173'
  testRuntime 'org.xerial:sqlite-jdbc:3.7.2' // type 3 driver
  testRuntime 'org.apache.derby:derby:10.10.1.1'
  testRuntime 'org.firebirdsql.jdbc:jaybird-jdk17:2.2.3' // type 4.1 driver
  testRuntime 'com.microsoft.sqlserver:mssql-jdbc:6.1.0.jre7'

  if (envDB.contains('Oracle')) {
    testRuntime name: 'ojdbc6' // oracle copied from docker oracle container
  }
}

sweeney {
    // require Java 1.7 or later for the build
    enforce type: 'range', expect: '[1.7,)', value: {System.getProperty('java.version')}
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

license {
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'P6Spy'

    header file('./script/qa/license_header.txt')
}

test {
    systemProperty 'user.language', 'en'
    systemProperty 'user.country', 'US'
    systemProperty 'derby.stream.error.file', 'target/derby.log'
    systemProperty 'DB', envDB
    
    // to enable remote JMX testing, 
    // see: http://stackoverflow.com/questions/5552960/how-to-connect-to-a-java-program-on-localhost-jvm-using-jmx
    // to workaround oracle timezone issue: http://stackoverflow.com/questions/9156379/ora-01882-timezone-region-not-found
    // to get rid of DB2 traces => -Ddb2.jcc.override.traceLevel=0
    // see: http://publib.boulder.ibm.com/infocenter/idshelp/v111/index.jsp?topic=/com.ibm.jccids.doc/com.ibm.db2.luw.apdv.java.doc/doc/r0052075.htm -->
    jvmArgs '-Dcom.sun.management.jmxremote', '-Dcom.sun.management.jmxremote.authenticate=false', '-Dcom.sun.management.jmxremote.port=1234', '-Dcom.sun.management.jmxremote.ssl=false', '-Doracle.jdbc.timezoneAsRegion=false', '-Ddb2.jcc.override.traceLevel=0'
}

// [BEGIN] central repo publishing
// see: http://central.sonatype.org/pages/gradle.html

group = 'p6spy'
archivesBaseName = 'p6spy'
version = '3.0.1-SNAPSHOT'

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      // TODO
      repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'Example Application'
        packaging 'jar'
        // optionally artifactId can be defined here 
        description 'P6Spy is a framework that enables database data to be seamlessly intercepted and logged with no code changes to the application.'
        url 'https://github.com/p6spy/p6spy'

        scm {
          connection 'scm:git:https://github.com/p6spy/p6spy.git'
          developerConnection 'scm:git:https://github.com/p6spy/p6spy.git'
          url 'https://github.com/p6spy/p6spy'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
      }
    }
  }
}
// [END] central repo publishing

// shadowJar {
//   configurations = [project.configurations.compile]
// }

// task shadowLog4jJar(type: ShadowJar) {
//   // archiveName = 'p6spy-lojg.jar'
//   baseName = 'p6spy-log4j'
//   from sourceSets.main.output //tells the task to include the project code
//   configurations = [ configurations.runtime ] //tells the task to shadow in the jars files in the 'runtime' scope
// }
